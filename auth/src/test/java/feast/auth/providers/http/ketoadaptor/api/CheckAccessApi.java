/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package feast.auth.providers.http.ketoadaptor.api;

import feast.auth.providers.http.ketoadaptor.model.AuthorizationResult;
import feast.auth.providers.http.ketoadaptor.model.CheckAccessRequest;
import feast.auth.providers.http.ketoadaptor.model.InlineResponse500;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-12T11:35:52.408245+08:00[Asia/Singapore]")

@Validated
@Api(value = "checkAccess", description = "the checkAccess API")
public interface CheckAccessApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /checkAccess : Check whether request is authorized to access a specific resource
     *
     * @param body Request containing user, resource, and action information. Used to make an authorization decision. (required)
     * @return Authorization passed response (status code 200)
     *         or Authorization failed response (status code 403)
     *         or The standard error format (status code 500)
     */
    @ApiOperation(value = "Check whether request is authorized to access a specific resource", nickname = "checkAccessPost", notes = "", response = AuthorizationResult.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authorization passed response", response = AuthorizationResult.class),
        @ApiResponse(code = 403, message = "Authorization failed response", response = AuthorizationResult.class),
        @ApiResponse(code = 500, message = "The standard error format", response = InlineResponse500.class) })
    @RequestMapping(value = "/checkAccess",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AuthorizationResult> checkAccessPost(@ApiParam(value = "Request containing user, resource, and action information. Used to make an authorization decision." ,required=true )  @Valid @RequestBody CheckAccessRequest body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allowed\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
